import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/data/latest.dart' as tz;
import 'package:timezone/timezone.dart' as tz;
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'live_tracking_map_screen.dart'; // üëà ƒë·∫£m b·∫£o import ƒë√∫ng
import '../main.dart'; // üëà ch·ª©a navigatorKey, ch·ªânh ƒë∆∞·ªùng d·∫´n n·∫øu c·∫ßn
import 'package:geolocator/geolocator.dart';

final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
FlutterLocalNotificationsPlugin();

class NotificationService {
  static final _notifications = FlutterLocalNotificationsPlugin();

  Future<void> init() async {
    tz.initializeTimeZones();
    const androidSettings = AndroidInitializationSettings('@mipmap/ic_launcher');
    const initSettings = InitializationSettings(
      android: androidSettings,
    );

    await _notifications.initialize(
      initSettings,
      onDidReceiveNotificationResponse: (NotificationResponse response) async {
        final payload = response.payload;
        if (payload != null && payload.contains(',')) {
          _handleNotificationTap(payload);
        }
      },
    );
  }
  Future<bool> startLiveTrackingCountdown({
    required LatLng toLatLng,
    Duration? duration,
  }) async {
    try {
      Position currentPosition = await Geolocator.getCurrentPosition();
      double distanceMeters = Geolocator.distanceBetween(
        currentPosition.latitude,
        currentPosition.longitude,
        toLatLng.latitude,
        toLatLng.longitude,
      );

      double speed = currentPosition.speed > 1 ? currentPosition.speed : 5; // m/s m·∫∑c ƒë·ªãnh
      double estimatedSeconds = distanceMeters / speed;
      Duration eta = Duration(seconds: estimatedSeconds.round());

      print("‚è≥ B·∫Øt ƒë·∫ßu ETA ƒë·∫øm ng∆∞·ª£c: ${eta.inSeconds}s");

      await Future.delayed(eta); // Ch·ªù ƒë·∫øn khi t·ªõi n∆°i (m√¥ ph·ªèng)

      print("‚úÖ ƒê√£ ƒë·∫øn n∆°i");
      return true;
    } catch (e) {
      print("‚ùå L·ªói ETA: $e");
      return false;
    }
  }

  Future<void> scheduleNotification({
    required int id,
    required String title,
    required String body,
    required DateTime scheduledTime,
  }) async {
    await _notifications.zonedSchedule(
      id,
      title,
      body,
      tz.TZDateTime.from(scheduledTime, tz.local),
      const NotificationDetails(
        android: AndroidNotificationDetails(
          'schedule_channel',
          'L·ªãch h·ªçc',
          importance: Importance.max,
          priority: Priority.high,
        ),
      ),
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      uiLocalNotificationDateInterpretation:
      UILocalNotificationDateInterpretation.absoluteTime,
      matchDateTimeComponents: DateTimeComponents.dateAndTime,
    );
  }

  Future<void> showLiveTrackingNotification({
    required String toLatLng,
    required Duration duration,
  }) async {
    final scheduledTime = tz.TZDateTime.now(tz.local).add(const Duration(seconds: 1));

    await _notifications.zonedSchedule(
      999,
      'B·∫Øt ƒë·∫ßu theo d√µi',
      'Nh·∫•n ƒë·ªÉ xem v·ªã tr√≠: $toLatLng',
      scheduledTime,
      const NotificationDetails(
        android: AndroidNotificationDetails(
          'tracking_channel_id',
          'Live Tracking Notifications',
          importance: Importance.max,
          priority: Priority.high,
          ticker: 'ticker',
          ongoing: true,     // ‚úÖ lu√¥n hi·ªÉn th·ªã
          autoCancel: false, // ‚úÖ kh√¥ng t·ª± ƒë√≥ng
        ),
      ),
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      payload: toLatLng,
      uiLocalNotificationDateInterpretation:
      UILocalNotificationDateInterpretation.absoluteTime,
    );
  }

}

/// ‚úÖ H√†m x·ª≠ l√Ω khi nh·∫•n v√†o th√¥ng b√°o (toLatLng d·∫°ng "10.93,106.85")
void _handleNotificationTap(String payload) {
  print("üü¢ ƒê√£ nh·∫≠n tap v√†o th√¥ng b√°o v·ªõi payload: $payload");
  final parts = payload.split(',');
  if (parts.length == 2) {
    final lat = double.tryParse(parts[0]);
    final lng = double.tryParse(parts[1]);
    if (lat != null && lng != null) {
      navigatorKey.currentState?.push(
        MaterialPageRoute(
          builder: (_) => LiveTrackingMapScreen(
            destination: LatLng(lat, lng),
          ),
        ),
      );
    }
  }
}
